{"version":3,"sources":["webpack://client/./src/view.js","webpack://client/./src/index.js","webpack://client/./src/stores/peer.js","webpack://client/./src/stores/websocket.js","webpack://client/./src/store.tsx","webpack://client/./src/views/game.tsx","webpack://client/./src/views/home.tsx"],"names":["App","Provider","store","basename","Link","to","exact","path","About","reactAnchor","document","createElement","container","body","appendChild","ReactDOM","wsConnect","host","player1Image","Image","src","player1ImageSrc","enemy1Image","enemy1ImageSrc","p2pConnect","createAction","any","payload","p2pConnecting","p2pConnected","p2pDisconnect","p2pMessage","p2pSend","p2pSignal","newCanvas","peerConnection","vvlt","isHost","raf","step","currentFrame","next","action","type","destroy","Peer","initiator","on","event","dispatch","wsSend","Signal","JSON","stringify","onSignal","console","log","onConnect","onError","data","response","handle_remote_input","performance","now","send","signal","parse","canvas","cancelAnimationFrame","clearInterval","settings","RendererSettings","renderer","Renderer","set_width_height","VvltClient","addEventListener","input","key","handle_up_pressed","handle_down_pressed","handle_left_pressed","handle_right_pressed","handle_fire_pressed","preventDefault","handle_up_released","handle_down_released","handle_left_released","handle_right_released","handle_fire_released","loop","time","render","requestAnimationFrame","FRAME_TIME_MS","setInterval","hashMsg","needs_hash","pingMsg","needs_ping","estimated_remote_frame","Math","max","latency_ms","wsConnecting","wsConnected","wsDisconnect","wsMessage","socket","close","WebSocket","onmessage","ACTIONS","content","error","onMessage","onclose","onClose","onopen","target","url","onOpen","ConnectionState","DEFAULT_STATE","user_id","rooms","active_room","p2p_connection_state","NotConnected","rootSlice","createSlice","name","initialState","reducers","AllRooms","state","Object","assign","CreatedRoom","concat","room","RemovedRoom","filter","id","room_id","JoinedRoom","SetID","extraReducers","builder","addCase","Connected","Connecting","middleware","getDefaultMiddleware","actions","configureStore","reducer","connect","props","connection_state","useDispatch","width","height","ref","useStyles","makeStyles","theme","root","classes","useHistory","joinRoomCallback","JoinRoom","find","className","variant","color","onClick","CreateRoom","random","component","map","index","button","bind","primary"],"mappings":"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","file":"974.a2a6761d9230d8d2d042.bundle.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {\r\n\tBrowserRouter as Router,\r\n\tSwitch,\r\n\tRoute,\r\n\tLink,\r\n} from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport store from './store';\r\nimport Home from './views/home';\r\nimport Game from './views/game';\r\n\r\n\r\nexport default function render(container) {\r\n\tReactDOM.render(<App />, container);\r\n}\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<Provider store={store}>\r\n\t\t\t<Router basename=\"/vvlt\">\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<Link to=\"/\">Home</Link>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<Link to=\"/about\">About</Link>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t</ul>\r\n\r\n\t\t\t\t\t<hr />\r\n\r\n\t\t\t\t\t{/*\r\n\t\t\t\t\t\tA <Switch> looks through all its children <Route>\r\n\t\t\t\t\t\telements and renders the first one whose path\r\n\t\t\t\t\t\tmatches the current URL. Use a <Switch> any time\r\n\t\t\t\t\t\tyou have multiple routes, but you want only one\r\n\t\t\t\t\t\tof them to render at a time\r\n\t\t\t\t\t*/}\r\n\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t<Route exact path=\"/\">\r\n\t\t\t\t\t\t\t<Home />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/about\">\r\n\t\t\t\t\t\t\t<About />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/game\">\r\n\t\t\t\t\t\t\t<Game />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t</Switch>\r\n\t\t\t\t</div>\r\n\t\t\t</Router>\r\n\t\t</Provider>\r\n\t);\r\n}\r\n\r\nfunction About() {\r\n\treturn (\r\n\t\t<div>Whatch'you wanna know about?</div>\r\n\t);\r\n}","import render from './view';\r\nimport store, { setUserId, fetchRooms, setRooms } from './store.tsx';\r\nimport { wsConnect } from './stores/websocket';\r\n\r\nconst reactAnchor = document.createElement('div');\r\ndocument.body.appendChild(reactAnchor);\r\nrender(reactAnchor);\r\n\r\nif (process.env.NODE_ENV !== 'production') {\r\n\tstore.dispatch(wsConnect({ host: 'ws://localhost:8080/connect' }));\r\n} else { \r\n\tstore.dispatch(wsConnect({ host: 'wss://salty-mesa-40253.herokuapp.com/connect' }));\r\n}","import { createAction } from '@reduxjs/toolkit';\r\nimport Peer from 'simple-peer';\r\nimport { wsSend } from './websocket';\r\nimport { Renderer, RendererSettings, VvltClient } from 'vvlt';\r\n\r\nimport player1ImageSrc from '../../../../../rust/vult/resources/images/playerShip1_red.png';\r\nimport enemy1ImageSrc from '../../../../../rust/vult/resources/images/enemyBlack1.png';\r\n\r\nconst player1Image = new Image();\r\nplayer1Image.src = player1ImageSrc;\r\n\r\nconst enemy1Image = new Image();\r\nenemy1Image.src = enemy1ImageSrc;\r\n\r\nexport const p2pConnect = createAction('P2P_CONNECT', function prepare(any) {\r\n  return {\r\n    payload: any\r\n  }\r\n});\r\nexport const p2pConnecting = createAction('P2P_CONNECTING');\r\nexport const p2pConnected = createAction('P2P_CONNECTED');\r\nexport const p2pDisconnect = createAction('P2P_DISCONNECT');\r\nexport const p2pMessage = createAction('P2P_MESSAGE');\r\nexport const p2pSend = createAction('P2P_NEW_MESSAGE', function prepare(any) {\r\n  return {\r\n    payload: any\r\n  };\r\n});\r\nexport const p2pSignal = createAction('P2P_SIGNAL', function prepare(any) {\r\n  return any;\r\n});\r\nexport const newCanvas = createAction('NEW_GAME_CANVAS', function prepare(any) {\r\n  return {\r\n    payload: any\r\n  };\r\n});\r\n\r\nconst peerMiddleware = () => {\r\n  let peerConnection = null;\r\n  let vvlt = null;\r\n  let isHost = null;\r\n  let raf = null;\r\n  let step = null;\r\n\r\n  let currentFrame = 0;\r\n\r\n  const onConnect = store => () => {\r\n    console.log(\"p2p\", \"onConnect\");\r\n    store.dispatch(p2pConnected());\r\n  };\r\n\r\n  const onClose = store => () => {\r\n    console.log(\"p2p\", \"onClose\");\r\n    store.dispatch(p2pDisconnect());\r\n  };\r\n\r\n  const onSignal = store => (event) => {\r\n    store.dispatch(wsSend({\r\n      Signal: {\r\n        payload: JSON.stringify(event),\r\n      }\r\n    }));\r\n  };\r\n\r\n  const onError = store => event => {\r\n    console.log(\"p2p\", \"onError\");\r\n    store.dispatch(p2pDisconnect());\r\n    store.dispatch(wsSend('LeaveRoom'));\r\n  }\r\n\r\n  const onData = store => (data) => {\r\n    let response = vvlt.handle_remote_input(data, performance.now());\r\n    if (response) {\r\n      peerConnection.send(response);\r\n    }\r\n  }\r\n\r\n  // the middleware part of this function\r\n  return store => next => action => {\r\n    switch (action.type) {\r\n      case 'P2P_CONNECT':\r\n        if (peerConnection !== null) {\r\n          peerConnection.destroy();\r\n        }\r\n\r\n        // connect to the remote host\r\n        peerConnection = new Peer({ initiator: action.payload });\r\n        isHost = action.payload;\r\n\r\n        peerConnection.on('signal', onSignal(store));\r\n        peerConnection.on('connect', onConnect(store));\r\n        peerConnection.on('error', onError(store));\r\n        peerConnection.on('data', onData(store));\r\n\r\n        return next(action);\r\n      case 'P2P_DISCONNECT':\r\n        if (peerConnection !== null) {\r\n          peerConnection.destroy();\r\n        }\r\n        peerConnection = null;\r\n        // console.log('websocket closed');\r\n        return next(action);\r\n      case 'P2P_NEW_MESSAGE':\r\n        peerConnection.send(action.payload);\r\n        break;\r\n      case 'P2P_SIGNAL':\r\n        peerConnection.signal(JSON.parse(action.payload))\r\n        break;\r\n      case 'NEW_GAME_CANVAS':\r\n        let canvas = action.payload;\r\n        if (canvas === null) {\r\n          cancelAnimationFrame(raf);\r\n          clearInterval(step);\r\n          break;\r\n        }\r\n\r\n        const settings = new RendererSettings(canvas, player1Image, enemy1Image);\r\n        const renderer = new Renderer(settings);\r\n        renderer.set_width_height(512, 512);\r\n        vvlt = new VvltClient(isHost);\r\n\r\n        document.addEventListener('keydown', (event) => {\r\n          let input = null;\r\n          switch (event.key) {\r\n            case 'ArrowUp':\r\n              input = vvlt.handle_up_pressed();\r\n              break;\r\n            case 'ArrowDown':\r\n              input = vvlt.handle_down_pressed();\r\n              break;\r\n            case 'ArrowLeft':\r\n              input = vvlt.handle_left_pressed();\r\n              break;\r\n            case 'ArrowRight':\r\n              input = vvlt.handle_right_pressed();\r\n              break;\r\n            case ' ':\r\n              input = vvlt.handle_fire_pressed();\r\n              break;\r\n          }\r\n          if (input) {\r\n            event.preventDefault();\r\n            peerConnection.send(input);\r\n          }\r\n        });\r\n\r\n        document.addEventListener('keyup', (event) => {\r\n          let input = null;\r\n          switch (event.key) {\r\n            case 'ArrowUp':\r\n              input = vvlt.handle_up_released();\r\n              break;\r\n            case 'ArrowDown':\r\n              input = vvlt.handle_down_released();\r\n              break;\r\n            case 'ArrowLeft':\r\n              input = vvlt.handle_left_released();\r\n              break;\r\n            case 'ArrowRight':\r\n              input = vvlt.handle_right_released();\r\n              break;\r\n            case ' ':\r\n              input = vvlt.handle_fire_released();\r\n              break;\r\n          }\r\n          if (input) {\r\n            event.preventDefault();\r\n            peerConnection.send(input);\r\n          }\r\n        });\r\n\r\n        const loop = (time) => {\r\n          renderer.render(vvlt);\r\n          raf = requestAnimationFrame(loop);\r\n        }\r\n        raf = requestAnimationFrame(loop);\r\n\r\n        const FRAME_TIME_MS = 16;\r\n        step = setInterval(() => {\r\n          const hashMsg = vvlt.needs_hash();\r\n          if (hashMsg) {\r\n            peerConnection.send(hashMsg);\r\n          }\r\n          const pingMsg = vvlt.needs_ping(performance.now());\r\n          if (pingMsg) {\r\n            peerConnection.send(pingMsg);\r\n          }\r\n\r\n          const est_remote_frame = vvlt.estimated_remote_frame();\r\n          // allow at least 10 frames of flex\r\n          const latency = Math.max(vvlt.latency_ms(), FRAME_TIME_MS * 10);\r\n          const frame_latency = (latency * 2) / (FRAME_TIME_MS);\r\n          const remote_frame = est_remote_frame + frame_latency;\r\n          if (remote_frame >= currentFrame) {\r\n            currentFrame = vvlt.step();\r\n          }\r\n        }, FRAME_TIME_MS);\r\n        break;\r\n      default:\r\n        // console.log('the next action:', action);\r\n        return next(action);\r\n    }\r\n  };\r\n};\r\n\r\nexport default peerMiddleware();","import { createAction } from '@reduxjs/toolkit';\r\nimport * as ACTIONS from '../store';\r\nimport { p2pSignal } from '../stores/peer';\r\n\r\nexport const wsConnect = createAction('WS_CONNECT');\r\nexport const wsConnecting = createAction('WS_CONNECTING');\r\nexport const wsConnected = createAction('WS_CONNECTED');\r\nexport const wsDisconnect = createAction('WS_DISCONNECT');\r\nexport const wsMessage = createAction('WS_MESSAGE');\r\nexport const wsSend = createAction('WS_NEW_MESSAGE', function prepare(any) {\r\n  return {\r\n    payload: any\r\n  }\r\n});\r\n\r\nconst socketMiddleware = () => {\r\n  let socket = null;\r\n\r\n  const onOpen = store => (event) => {\r\n    store.dispatch(wsConnected(event.target.url));\r\n  };\r\n\r\n  const onClose = store => () => {\r\n    store.dispatch(wsDisconnect());\r\n  };\r\n\r\n  const onMessage = store => (event) => {\r\n    const payload = JSON.parse(event.data);\r\n    if (typeof(ACTIONS[payload.type]) === \"function\") {\r\n        store.dispatch(ACTIONS[payload.type](payload.content));\r\n    } else if (payload.type == \"Signal\") {\r\n      store.dispatch(p2pSignal(payload.content));\r\n    } else {\r\n      console.error(\"unrecognized response!\");\r\n    }\r\n  };\r\n\r\n  // the middleware part of this function\r\n  return store => next => action => {\r\n    switch (action.type) {\r\n      case 'WS_CONNECT':\r\n        if (socket !== null) {\r\n          socket.close();\r\n        }\r\n\r\n        // connect to the remote host\r\n        socket = new WebSocket(action.payload.host);\r\n\r\n        // websocket handlers\r\n        socket.onmessage = onMessage(store);\r\n        socket.onclose = onClose(store);\r\n        socket.onopen = onOpen(store);\r\n\r\n        break;\r\n      case 'WS_DISCONNECT':\r\n        if (socket !== null) {\r\n          socket.close();\r\n        }\r\n        socket = null;\r\n        // console.log('websocket closed');\r\n        break;\r\n      case 'WS_NEW_MESSAGE':\r\n        socket.send(JSON.stringify(action.payload));\r\n        break;\r\n      default:\r\n        // console.log('the next action:', action);\r\n        return next(action);\r\n    }\r\n  };\r\n};\r\n\r\nexport default socketMiddleware();","import { configureStore, createSlice, createAsyncThunk, PayloadAction, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport socketMiddleware, { wsMessage } from './stores/websocket';\r\nimport peerMiddleware, { p2pConnected, p2pConnect, p2pDisconnect } from './stores/peer';\r\n\r\nexport interface User {\r\n\tid: string,\r\n}\r\n\r\nexport interface Room {\r\n\tname: string,\r\n\tid: string,\r\n\thost: User,\r\n\tpeer?: User,\r\n}\r\n\r\nexport enum ConnectionState {\r\n\tNotConnected,\r\n\tConnecting,\r\n\tConnected,\r\n}\r\n\r\nexport interface State {\r\n\tuser_id?: string,\r\n\trooms: Array<Room>,\r\n\tactive_room?: string,\r\n\tp2p_connection_state: ConnectionState,\r\n}\r\n\r\ninterface AllRoomsPayload {\r\n\trooms: Array<Room>\r\n}\r\n\r\ninterface CreateRoomPayload {\r\n\troom: Room,\r\n}\r\n\r\ninterface RemovedRoomPayload {\r\n\troom_id: string,\r\n}\r\n\r\ninterface JoinedRoomPayload {\r\n\troom_id: string,\t\r\n}\r\n\r\ninterface SetIDPayload {\r\n\tuser_id: string,\r\n}\r\n\r\nconst DEFAULT_STATE: State = {\r\n\tuser_id: null,\r\n\trooms: [],\r\n\tactive_room: null,\r\n\tp2p_connection_state: ConnectionState.NotConnected,\r\n};\r\n\r\nconst rootSlice = createSlice({\r\n\tname: 'root',\r\n\tinitialState: DEFAULT_STATE,\r\n\treducers: {\r\n\t\tAllRooms(state, action: PayloadAction<AllRoomsPayload>) {\r\n\t\t\treturn Object.assign({}, state, {\r\n\t\t\t\trooms: action.payload.rooms\r\n\t\t\t});\r\n\t\t},\r\n\t\tCreatedRoom(state, action: PayloadAction<CreateRoomPayload>) {\r\n\t\t\treturn { ...state, rooms: state.rooms.concat(action.payload.room) }\r\n\t\t},\r\n\t\tRemovedRoom(state, action: PayloadAction<RemovedRoomPayload>) {\r\n\t\t\treturn { \r\n\t\t\t\t...state, \r\n\t\t\t\trooms: state.rooms.filter((room) => {\r\n\t\t\t\t\treturn room.id !== action.payload.room_id;\r\n\t\t\t\t}), \r\n\t\t\t\tactive_room: state.active_room == action.payload.room_id ? null : state.active_room\r\n\t\t\t}\r\n\t\t},\r\n\t\tJoinedRoom(state, action: PayloadAction<JoinedRoomPayload>) {\r\n\t\t\treturn { ...state, active_room: action.payload.room_id }\r\n\t\t},\r\n\t\tSetID(state, action: PayloadAction<SetIDPayload>) {\r\n\t\t\treturn { ...state, user_id: action.payload.user_id }\r\n\t\t},\r\n\t},\r\n\textraReducers(builder) {\r\n\t\tbuilder.addCase(p2pConnected, (state, action) => {\r\n\t\t\treturn { \r\n\t\t\t\t...state, \r\n\t\t\t\tp2p_connection_state: ConnectionState.Connected\r\n\t\t\t};\r\n\t\t});\r\n\t\tbuilder.addCase(p2pConnect, (state, action) => {\r\n\t\t\treturn { \r\n\t\t\t\t...state, \r\n\t\t\t\tp2p_connection_state: ConnectionState.Connecting\r\n\t\t\t};\r\n\t\t});\r\n\t\tbuilder.addCase(p2pDisconnect, (state, action) => {\r\n\t\t\treturn { \r\n\t\t\t\t...state, \r\n\t\t\t\tp2p_connection_state: ConnectionState.NotConnected\r\n\t\t\t};\r\n\t\t});\r\n\t}\r\n})\r\n\r\nconst middleware = [socketMiddleware, peerMiddleware, ...getDefaultMiddleware()];\r\n\r\nexport const { AllRooms, CreatedRoom, RemovedRoom, JoinedRoom, SetID } = rootSlice.actions;\r\nexport default configureStore({ \r\n\treducer: rootSlice.reducer,\r\n\tmiddleware: middleware,\r\n});\r\n\r\n","import React from 'react';\r\nimport { connect, useDispatch } from 'react-redux';\r\n// @ts-ignore\r\nimport { newCanvas } from '../stores/peer';\r\nimport { State, Room, ConnectionState } from '../store';\r\n\r\ninterface PassedProps {\r\n\troom: Room,\r\n}\r\n\r\ninterface GameProps extends PassedProps {\r\n\tuser_id: string,\r\n\tconnection_state: ConnectionState,\r\n}\r\n\r\nconst mapStateToProps = (state: State, props: PassedProps) => ({ \r\n\t...props,\r\n\tuser_id: state.user_id,\r\n\tconnection_state: state.p2p_connection_state,\r\n});\r\n\r\nexport default connect(\r\n\tmapStateToProps,\r\n\tnull,\r\n)(function Game({ room, user_id, connection_state }: GameProps) {\r\n\r\n\tconst dispatch = useDispatch();\r\n\tconst refCallback = (canvas: HTMLCanvasElement) => {\r\n\t\tdispatch(newCanvas(canvas));\r\n\t}\r\n\r\n\tswitch (connection_state) {\r\n\t\tcase ConnectionState.NotConnected: \r\n\t\tcase ConnectionState.Connecting:\r\n\t\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\tLoading: {room.name}\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\tcase ConnectionState.Connected:\r\n\t\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{room.name}\r\n\t\t\t\t\t<canvas width={512} height={512} ref={refCallback} />\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t}\r\n});","import React from 'react';\r\nimport { connect, useDispatch } from 'react-redux'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport Game from './game';\r\nimport store, { State, Room, } from '../store';\r\nimport { wsSend } from '../stores/websocket';\r\nimport { p2pConnect } from '../stores/peer';\r\n\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\troot: {},\r\n}));\r\n\r\ninterface HomeProps {\r\n\trooms: Array<Room>\r\n\tactive_room?: string,\r\n}\r\n\r\nconst mapStateToProps = (state: State) => ({\r\n\trooms: state.rooms,\r\n\tactive_room: state.active_room,\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n\t// ... normally is an object full of action creators\r\n}\r\n\r\nexport default connect(\r\n\tmapStateToProps,\r\n\tmapDispatchToProps\r\n)(function Home({rooms, active_room}: HomeProps) {\r\n\tconst classes = useStyles();\r\n\tconst history = useHistory();\r\n\r\n\tlet dispatch = useDispatch();\r\n\r\n\tconst createRoomCallback = () => {\r\n\t\tdispatch(wsSend({ CreateRoom: { name: \"Test Room \" + Math.random() }}));\r\n\t\tdispatch(p2pConnect(true));\r\n\t};\r\n\r\n\tconst joinRoomCallback = (room_id: string) => {\r\n\t\tstore.dispatch(wsSend({ JoinRoom: { room_id: room_id }}));\r\n\t\tdispatch(p2pConnect(false));\r\n\t};\r\n\r\n\tif (active_room) {\r\n\t\tlet room = rooms.find((room) => room.id == active_room);\r\n\t\treturn <Game room={room} />;\r\n\t} else {\r\n\t\treturn (\r\n\t\t\t<div className={classes.root} >\r\n\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={createRoomCallback}>\r\n\t\t\t\t\tCreate Room\r\n\t\t\t\t</Button>\r\n\t\t\t\t<List component='nav' >\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\trooms.map((room, index) => {\r\n\t\t\t\t\t\t\treturn <ListItem key={room.id} button onClick={joinRoomCallback.bind(null, room.id)}>\r\n\t\t\t\t\t\t\t\t<ListItemText primary={room.name} />\r\n\t\t\t\t\t\t\t</ListItem>;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t</List>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n});"],"sourceRoot":""}
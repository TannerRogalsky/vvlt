{"version":3,"sources":["webpack://client/./src/view.js","webpack://client/./src/index.js","webpack://client/./node_modules/file-loader/rust/vult/resources/bin_levels/temp.bin","webpack://client/./src/store.tsx","webpack://client/./src/stores/peer.ts","webpack://client/./src/stores/websocket.ts","webpack://client/./src/views/game.tsx","webpack://client/./src/views/home.tsx"],"names":["App","Provider","store","basename","Link","to","exact","path","About","reactAnchor","document","createElement","container","body","appendChild","ReactDOM","wsConnect","host","ConnectionState","DEFAULT_STATE","user_id","rooms","p2p_connection_state","NotConnected","rootSlice","createSlice","name","initialState","reducers","AllRooms","state","action","Object","assign","payload","CreatedRoom","concat","room","RemovedRoom","filter","id","room_id","UpdatedRoom","map","SetID","extraReducers","builder","addCase","p2pConnected","Connected","p2pConnect","Connecting","p2pDisconnect","activeRoom","find","peer","middleware","getDefaultMiddleware","actions","configureStore","reducer","levelData","fetch","then","r","arrayBuffer","Uint8Array","player1Image","Image","src","peerConnection","vvlt","isHost","canvas","raf","step","currentFrame","hashesSent","debugRaf","enemy1Image","createAction","t","p2pConnecting","p2pMessage","p2pSend","p2pSignal","any","newCanvas","newDebugCanvas","next","type","destroy","initiator","on","event","dispatch","wsSend","Signal","JSON","stringify","onSignal","console","log","onConnect","onError","data","response","handle_remote_input","performance","now","send","signal","parse","cancelAnimationFrame","getContext","y","clearRect","width","height","font","fillText","latency_ms","estimated_remote_frame","last_synchronized","local_stock_count","remote_stock_count","gameState","requestAnimationFrame","clearInterval","VvltClient","settings","RendererSettings","Renderer","addEventListener","input","key","handle_up_pressed","handle_down_pressed","handle_left_pressed","handle_right_pressed","handle_fire_pressed","preventDefault","handle_up_released","handle_down_released","handle_left_released","handle_right_released","handle_fire_released","time","render","window","setInterval","hashMsg","needs_hash","pingMsg","needs_ping","Math","max","socket","wsConnecting","wsConnected","wsDisconnect","wsMessage","close","WebSocket","onmessage","maybeAction","ACTIONS","content","error","onMessage","onclose","onClose","onopen","onOpen","connect","props","connection_state","useDispatch","useState","debug","setDebug","overlayStyle","position","left","top","right","bottom","style","ref","onChange","e","target","checked","useStyles","makeStyles","theme","root","active_room","classes","useHistory","joinRoomCallback","JoinRoom","className","variant","color","onClick","CreateRoom","random","component","index","button","bind","primary"],"mappings":"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","file":"974.a3eb14b3df8d2dc930ba.bundle.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {\r\n\tBrowserRouter as Router,\r\n\tSwitch,\r\n\tRoute,\r\n\tLink,\r\n} from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport store from './store';\r\nimport Home from './views/home';\r\nimport Game from './views/game';\r\n\r\n\r\nexport default function render(container) {\r\n\tReactDOM.render(<App />, container);\r\n}\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<Provider store={store}>\r\n\t\t\t<Router basename=\"/vvlt\">\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<Link to=\"/\">Home</Link>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<Link to=\"/about\">About</Link>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t</ul>\r\n\r\n\t\t\t\t\t<hr />\r\n\r\n\t\t\t\t\t{/*\r\n\t\t\t\t\t\tA <Switch> looks through all its children <Route>\r\n\t\t\t\t\t\telements and renders the first one whose path\r\n\t\t\t\t\t\tmatches the current URL. Use a <Switch> any time\r\n\t\t\t\t\t\tyou have multiple routes, but you want only one\r\n\t\t\t\t\t\tof them to render at a time\r\n\t\t\t\t\t*/}\r\n\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t<Route exact path=\"/\">\r\n\t\t\t\t\t\t\t<Home />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/about\">\r\n\t\t\t\t\t\t\t<About />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/game\">\r\n\t\t\t\t\t\t\t<Game />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t</Switch>\r\n\t\t\t\t</div>\r\n\t\t\t</Router>\r\n\t\t</Provider>\r\n\t);\r\n}\r\n\r\nfunction About() {\r\n\treturn (\r\n\t\t<div>Whatch'you wanna know about?</div>\r\n\t);\r\n}","import render from './view';\r\nimport store, { setUserId, fetchRooms, setRooms } from './store.tsx';\r\nimport { wsConnect } from './stores/websocket';\r\n\r\nconst reactAnchor = document.createElement('div');\r\ndocument.body.appendChild(reactAnchor);\r\nrender(reactAnchor);\r\n\r\nif (process.env.NODE_ENV !== 'production') {\r\n\tstore.dispatch(wsConnect({ host: 'ws://localhost:8080/connect' }));\r\n} else { \r\n\tstore.dispatch(wsConnect({ host: 'wss://salty-mesa-40253.herokuapp.com/connect' }));\r\n}","export default __webpack_public_path__ + \"0d4222d9f543db2cff2278e9c2339cc0.bin\";","import { configureStore, createSlice, createAsyncThunk, PayloadAction, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport socketMiddleware, { wsMessage } from './stores/websocket';\r\nimport peerMiddleware, { p2pConnected, p2pConnect, p2pDisconnect } from './stores/peer';\r\n\r\nexport interface User {\r\n\tid: string,\r\n}\r\n\r\nexport interface Room {\r\n\tname: string,\r\n\tid: string,\r\n\thost: User,\r\n\tpeer?: User,\r\n}\r\n\r\nexport enum ConnectionState {\r\n\tNotConnected,\r\n\tConnecting,\r\n\tConnected,\r\n}\r\n\r\nexport interface State {\r\n\tuser_id?: string,\r\n\trooms: Array<Room>,\r\n\tp2p_connection_state: ConnectionState,\r\n}\r\n\r\ninterface AllRoomsPayload {\r\n\trooms: Array<Room>\r\n}\r\n\r\ninterface CreateRoomPayload {\r\n\troom: Room,\r\n}\r\n\r\ninterface RemovedRoomPayload {\r\n\troom_id: string,\r\n}\r\n\r\ninterface UpdatedRoomPayload {\r\n\troom: Room,\t\r\n}\r\n\r\ninterface SetIDPayload {\r\n\tuser_id: string,\r\n}\r\n\r\nconst DEFAULT_STATE: State = {\r\n\tuser_id: null,\r\n\trooms: [],\r\n\tp2p_connection_state: ConnectionState.NotConnected,\r\n};\r\n\r\nconst rootSlice = createSlice({\r\n\tname: 'root',\r\n\tinitialState: DEFAULT_STATE,\r\n\treducers: {\r\n\t\tAllRooms(state, action: PayloadAction<AllRoomsPayload>) {\r\n\t\t\treturn Object.assign({}, state, {\r\n\t\t\t\trooms: action.payload.rooms\r\n\t\t\t});\r\n\t\t},\r\n\t\tCreatedRoom(state, action: PayloadAction<CreateRoomPayload>) {\r\n\t\t\treturn { ...state, rooms: state.rooms.concat(action.payload.room) }\r\n\t\t},\r\n\t\tRemovedRoom(state, action: PayloadAction<RemovedRoomPayload>) {\r\n\t\t\treturn { \r\n\t\t\t\t...state, \r\n\t\t\t\trooms: state.rooms.filter((room) => {\r\n\t\t\t\t\treturn room.id !== action.payload.room_id;\r\n\t\t\t\t}),\r\n\t\t\t}\r\n\t\t},\r\n\t\tUpdatedRoom(state, action: PayloadAction<UpdatedRoomPayload>) {\r\n\t\t\treturn { ...state, rooms: state.rooms.map((room) => {\r\n\t\t\t\tif (room.id === action.payload.room.id) {\r\n\t\t\t\t\treturn action.payload.room;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn room;\r\n\t\t\t\t}\r\n\t\t\t}) }\r\n\t\t},\r\n\t\tSetID(state, action: PayloadAction<SetIDPayload>) {\r\n\t\t\treturn { ...state, user_id: action.payload.user_id }\r\n\t\t},\r\n\t},\r\n\textraReducers(builder) {\r\n\t\tbuilder.addCase(p2pConnected, (state, action) => {\r\n\t\t\treturn { \r\n\t\t\t\t...state, \r\n\t\t\t\tp2p_connection_state: ConnectionState.Connected\r\n\t\t\t};\r\n\t\t});\r\n\t\tbuilder.addCase(p2pConnect, (state, action) => {\r\n\t\t\treturn { \r\n\t\t\t\t...state, \r\n\t\t\t\tp2p_connection_state: ConnectionState.Connecting\r\n\t\t\t};\r\n\t\t});\r\n\t\tbuilder.addCase(p2pDisconnect, (state, action) => {\r\n\t\t\treturn { \r\n\t\t\t\t...state, \r\n\t\t\t\tp2p_connection_state: ConnectionState.NotConnected\r\n\t\t\t};\r\n\t\t});\r\n\t}\r\n});\r\n\r\nexport const activeRoom = function activeRoom(state: State): Room|undefined {\r\n\tif (state.user_id === null) {\r\n\t\treturn undefined;\r\n\t}\r\n\treturn state.rooms.find((room) => room.host.id === state.user_id || room.peer?.id === state.user_id);\r\n}\r\n\r\nconst middleware = [socketMiddleware, peerMiddleware, ...getDefaultMiddleware()];\r\n\r\nexport const { AllRooms, CreatedRoom, RemovedRoom, UpdatedRoom, SetID } = rootSlice.actions;\r\nexport default configureStore({ \r\n\treducer: rootSlice.reducer,\r\n\tmiddleware: middleware,\r\n});\r\n\r\n","import { Middleware, MiddlewareAPI, Dispatch, AnyAction } from 'redux';\r\nimport { createAction } from '@reduxjs/toolkit';\r\nimport Peer, { Instance } from 'simple-peer';\r\nimport { wsSend } from './websocket';\r\nimport { Renderer, RendererSettings, VvltClient } from 'vvlt';\r\nimport { State } from '../store';\r\n\r\nimport player1ImageSrc from '../../../../../rust/vult/resources/images/playerShip1_red.png';\r\nimport enemy1ImageSrc from '../../../../../rust/vult/resources/images/enemyBlack1.png';\r\n// @ts-ignore\r\nimport levelDataPath from '../../../../../rust/vult/resources/bin_levels/temp.bin';\r\n\r\nlet levelData: null | Uint8Array = null;\r\nfetch(levelDataPath).then(r => r.arrayBuffer()).then(r => levelData = new Uint8Array(r));\r\n\r\nconst player1Image = new Image();\r\nplayer1Image.src = player1ImageSrc;\r\n\r\nconst enemy1Image = new Image();\r\nenemy1Image.src = enemy1ImageSrc;\r\n\r\nfunction withPayloadType<T>() {\r\n  return (t: T) => ({ payload: t })\r\n}\r\n\r\nexport const p2pConnect = createAction('P2P_CONNECT', withPayloadType<boolean>());\r\nexport const p2pConnecting = createAction('P2P_CONNECTING');\r\nexport const p2pConnected = createAction('P2P_CONNECTED');\r\nexport const p2pDisconnect = createAction('P2P_DISCONNECT');\r\nexport const p2pMessage = createAction('P2P_MESSAGE');\r\nexport const p2pSend = createAction('P2P_NEW_MESSAGE', withPayloadType<any>());\r\nexport const p2pSignal = createAction('P2P_SIGNAL', function prepare(any) {\r\n  return any;\r\n});\r\nexport const newCanvas = createAction('NEW_GAME_CANVAS', withPayloadType<HTMLCanvasElement>());\r\nexport const newDebugCanvas = createAction('NEW_DEBUG_CANVAS', withPayloadType<HTMLCanvasElement>());\r\n\r\nconst peerMiddleware: () => Middleware<{}, State> = () => {\r\n  let peerConnection: null | Instance = null;\r\n  let vvlt: null | VvltClient = null;\r\n  let isHost: null | boolean = null;\r\n  let canvas: null | HTMLCanvasElement = null;\r\n  let raf: null | number = null;\r\n  let step: null | number = null;\r\n\r\n  let currentFrame = 0;\r\n  let hashesSent = 0;\r\n\r\n  let debugRaf: null | number = null;\r\n\r\n  type Store = MiddlewareAPI<Dispatch<AnyAction>, State>;\r\n\r\n  const onConnect = (store: Store) => () => {\r\n    console.log(\"p2p\", \"onConnect\");\r\n    store.dispatch(p2pConnected());\r\n  };\r\n\r\n  const onClose = (store: Store) => () => {\r\n    console.log(\"p2p\", \"onClose\");\r\n    store.dispatch(p2pDisconnect());\r\n  };\r\n\r\n  const onSignal = (store: Store) => (event: any) => {\r\n    store.dispatch(wsSend({\r\n      Signal: {\r\n        payload: JSON.stringify(event),\r\n      }\r\n    }));\r\n  };\r\n\r\n  const onError = (store: Store) => () => {\r\n    console.log(\"p2p\", \"onError\");\r\n    store.dispatch(p2pDisconnect());\r\n    store.dispatch(wsSend('LeaveRoom'));\r\n  }\r\n\r\n  const onData = (store: Store) => (data: Uint8Array) => {\r\n    let response = vvlt.handle_remote_input(data, performance.now());\r\n    if (response) {\r\n      peerConnection.send(response);\r\n    }\r\n  }\r\n\r\n  // the middleware part of this function\r\n  return store => next => action => {\r\n    switch (action.type) {\r\n      case 'P2P_CONNECT':\r\n        if (peerConnection !== null) {\r\n          peerConnection.destroy();\r\n        }\r\n\r\n        // connect to the remote host\r\n        peerConnection = new Peer({ \r\n          initiator: action.payload,\r\n          // trickle: false\r\n        });\r\n        isHost = action.payload;\r\n\r\n        peerConnection.on('signal', onSignal(store));\r\n        peerConnection.on('connect', onConnect(store));\r\n        peerConnection.on('error', onError(store));\r\n        peerConnection.on('data', onData(store));\r\n\r\n        return next(action);\r\n      case 'P2P_DISCONNECT':\r\n        if (peerConnection !== null) {\r\n          peerConnection.destroy();\r\n        }\r\n        peerConnection = null;\r\n        // console.log('websocket closed');\r\n        return next(action);\r\n      case 'P2P_NEW_MESSAGE':\r\n        peerConnection.send(action.payload);\r\n        break;\r\n      case 'P2P_SIGNAL':\r\n        peerConnection.signal(JSON.parse(action.payload))\r\n        break;\r\n      case 'NEW_DEBUG_CANVAS':\r\n        const debugCanvas = action.payload;\r\n        if (debugCanvas === null) {\r\n          cancelAnimationFrame(debugRaf);\r\n          break;\r\n        }\r\n\r\n        const debugCtx = debugCanvas.getContext('2d');\r\n        const X = 3;\r\n        const FONT_SIZE = 16;\r\n        const debugLoop = (t: DOMHighResTimeStamp) => {\r\n          let y = 0;\r\n          debugCtx.clearRect(0, 0, debugCanvas.width, debugCanvas.height);\r\n          debugCtx.font = `${FONT_SIZE}px serif`;\r\n          debugCtx.fillText(`Latency (ms): ${vvlt.latency_ms()}`, X, y += FONT_SIZE);\r\n          debugCtx.fillText(`Local Frame: ${currentFrame}`, X, y += FONT_SIZE);\r\n          debugCtx.fillText(`Remote Frame: ${vvlt.estimated_remote_frame()}`, X, y += FONT_SIZE);\r\n          debugCtx.fillText(`Synced Frame: ${vvlt.last_synchronized()}`, X, y += FONT_SIZE);\r\n          debugCtx.fillText(`Hashes Sent: ${hashesSent}`, X, y += FONT_SIZE);\r\n          debugCtx.fillText(`Stocks (Local Player): ${vvlt.local_stock_count()}`, X, y += FONT_SIZE);\r\n          debugCtx.fillText(`Stocks (Remote Player): ${vvlt.remote_stock_count()}`, X, y += FONT_SIZE);\r\n\r\n          let gameState = \"Running\";\r\n          switch (vvlt.state()) {\r\n            case -1: \r\n              gameState = \"Lost\";\r\n              break;\r\n            case 1: \r\n              gameState = \"Won!\";\r\n              break;\r\n          }\r\n          debugCtx.fillText(`Game State: ${gameState}`, X, y += FONT_SIZE);\r\n\r\n          debugRaf = requestAnimationFrame(debugLoop);\r\n        }\r\n        debugRaf = requestAnimationFrame(debugLoop);\r\n\r\n        break;\r\n      case 'NEW_GAME_CANVAS':\r\n        if (canvas) {\r\n          break;\r\n        }\r\n\r\n        canvas = action.payload;\r\n        if (canvas === null) {\r\n          cancelAnimationFrame(raf);\r\n          clearInterval(step);\r\n          break;\r\n        }\r\n\r\n        vvlt = new VvltClient(isHost, levelData);\r\n        const settings = new RendererSettings(canvas, player1Image, enemy1Image);\r\n        const renderer = new Renderer(settings, vvlt);\r\n\r\n        document.addEventListener('keydown', (event) => {\r\n          let input = null;\r\n          switch (event.key) {\r\n            case 'ArrowUp':\r\n              input = vvlt.handle_up_pressed();\r\n              break;\r\n            case 'ArrowDown':\r\n              input = vvlt.handle_down_pressed();\r\n              break;\r\n            case 'ArrowLeft':\r\n              input = vvlt.handle_left_pressed();\r\n              break;\r\n            case 'ArrowRight':\r\n              input = vvlt.handle_right_pressed();\r\n              break;\r\n            case ' ':\r\n              input = vvlt.handle_fire_pressed();\r\n              break;\r\n          }\r\n          if (input) {\r\n            event.preventDefault();\r\n            peerConnection.send(input);\r\n          }\r\n        });\r\n\r\n        document.addEventListener('keyup', (event) => {\r\n          let input = null;\r\n          switch (event.key) {\r\n            case 'ArrowUp':\r\n              input = vvlt.handle_up_released();\r\n              break;\r\n            case 'ArrowDown':\r\n              input = vvlt.handle_down_released();\r\n              break;\r\n            case 'ArrowLeft':\r\n              input = vvlt.handle_left_released();\r\n              break;\r\n            case 'ArrowRight':\r\n              input = vvlt.handle_right_released();\r\n              break;\r\n            case ' ':\r\n              input = vvlt.handle_fire_released();\r\n              break;\r\n          }\r\n          if (input) {\r\n            event.preventDefault();\r\n            peerConnection.send(input);\r\n          }\r\n        });\r\n\r\n        const loop = (time: DOMHighResTimeStamp) => {\r\n          renderer.render(vvlt);\r\n          raf = requestAnimationFrame(loop);\r\n        }\r\n        raf = requestAnimationFrame(loop);\r\n\r\n        const FRAME_TIME_MS = 16;\r\n        step = window.setInterval(() => {\r\n          const hashMsg = vvlt.needs_hash();\r\n          if (hashMsg) {\r\n            hashesSent += 1;\r\n            peerConnection.send(hashMsg);\r\n          }\r\n          const pingMsg = vvlt.needs_ping(performance.now());\r\n          if (pingMsg) {\r\n            peerConnection.send(pingMsg);\r\n          }\r\n\r\n          const est_remote_frame = vvlt.estimated_remote_frame();\r\n          // allow at least 10 frames of flex\r\n          const latency = Math.max(vvlt.latency_ms(), FRAME_TIME_MS * 10);\r\n          const frame_latency = (latency * 2) / (FRAME_TIME_MS);\r\n          const remote_frame = est_remote_frame + frame_latency;\r\n          if (remote_frame >= currentFrame) {\r\n            currentFrame = vvlt.step();\r\n          }\r\n        }, FRAME_TIME_MS);\r\n        break;\r\n      default:\r\n        // console.log('the next action:', action);\r\n        return next(action);\r\n    }\r\n  };\r\n};\r\n\r\nexport default peerMiddleware();","import { Middleware, MiddlewareAPI, Dispatch, AnyAction } from 'redux';\r\nimport { createAction } from '@reduxjs/toolkit';\r\nimport * as ACTIONS from '../store';\r\nimport { p2pSignal } from '../stores/peer';\r\n\r\nfunction withPayloadType<T>() {\r\n  return (t: T) => ({ payload: t })\r\n}\r\n\r\nexport const wsConnect = createAction('WS_CONNECT');\r\nexport const wsConnecting = createAction('WS_CONNECTING');\r\nexport const wsConnected = createAction('WS_CONNECTED');\r\nexport const wsDisconnect = createAction('WS_DISCONNECT');\r\nexport const wsMessage = createAction('WS_MESSAGE');\r\nexport const wsSend = createAction('WS_NEW_MESSAGE', withPayloadType<any>());\r\n\r\ntype Store = MiddlewareAPI<Dispatch<AnyAction>, ACTIONS.State>;\r\n\r\nconst socketMiddleware: () => Middleware<{}, ACTIONS.State> = () => {\r\n  let socket: WebSocket = null;\r\n\r\n  const onOpen = (store: Store) => (event: Event) => {\r\n    store.dispatch(wsConnected());\r\n  };\r\n\r\n  const onClose = (store: Store) => () => {\r\n    store.dispatch(wsDisconnect());\r\n  };\r\n\r\n  const onMessage = (store: Store) => (event: MessageEvent) => {\r\n    const payload = JSON.parse(event.data);\r\n\r\n    // @ts-ignore\r\n    const maybeAction = ACTIONS[payload.type];\r\n    if (typeof(maybeAction) === \"function\") {\r\n        store.dispatch(maybeAction(payload.content));\r\n    } else if (payload.type == \"Signal\") {\r\n      store.dispatch(p2pSignal(payload.content));\r\n    } else {\r\n      console.error(\"unrecognized response!\");\r\n    }\r\n  };\r\n\r\n  // the middleware part of this function\r\n  return store => next => action => {\r\n    switch (action.type) {\r\n      case 'WS_CONNECT':\r\n        if (socket !== null) {\r\n          socket.close();\r\n        }\r\n\r\n        // connect to the remote host\r\n        socket = new WebSocket(action.payload.host);\r\n\r\n        // websocket handlers\r\n        socket.onmessage = onMessage(store);\r\n        socket.onclose = onClose(store);\r\n        socket.onopen = onOpen(store);\r\n\r\n        break;\r\n      case 'WS_DISCONNECT':\r\n        if (socket !== null) {\r\n          socket.close();\r\n        }\r\n        socket = null;\r\n        // console.log('websocket closed');\r\n        break;\r\n      case 'WS_NEW_MESSAGE':\r\n        socket.send(JSON.stringify(action.payload));\r\n        break;\r\n      default:\r\n        // console.log('the next action:', action);\r\n        return next(action);\r\n    }\r\n  };\r\n};\r\n\r\nexport default socketMiddleware();","import React, { useState } from 'react';\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport { newCanvas, newDebugCanvas } from '../stores/peer';\r\nimport { State, Room, ConnectionState } from '../store';\r\n\r\ninterface PassedProps {\r\n\troom: Room,\r\n}\r\n\r\ninterface GameProps extends PassedProps {\r\n\tuser_id: string,\r\n\tconnection_state: ConnectionState,\r\n}\r\n\r\nconst mapStateToProps = (state: State, props: PassedProps) => ({ \r\n\t...props,\r\n\tuser_id: state.user_id,\r\n\tconnection_state: state.p2p_connection_state,\r\n});\r\n\r\nexport default connect(\r\n\tmapStateToProps,\r\n\tnull,\r\n)(function Game({ room, user_id, connection_state }: GameProps) {\r\n\r\n\tconst dispatch = useDispatch();\r\n\tconst refCallback = (canvas: HTMLCanvasElement) => {\r\n\t\tdispatch(newCanvas(canvas));\r\n\t}\r\n\tconst debugRefCallback = (canvas: HTMLCanvasElement) => {\r\n\t\tdispatch(newDebugCanvas(canvas))\r\n\t}\r\n\r\n\t// const [debug, setDebug] = useState(process.env.NODE_ENV !== 'production');\r\n\tconst [debug, setDebug] = useState(true);\r\n\tconst toggleDebug = (e: any) => {\r\n\t\tsetDebug(e.target.checked);\r\n\t}\r\n\r\n\tconst parentStyle = {\r\n\t\tposition: 'relative',\r\n\t} as React.CSSProperties;\r\n\r\n\tconst overlayStyle = {\r\n\t\tposition: 'absolute',\r\n\t\tleft: 0,\r\n\t\ttop: 0,\r\n\t\tright: 0,\r\n\t\tbottom: 0,\r\n\t\twidth: '100%',\r\n\t} as React.CSSProperties;\r\n\r\n\tswitch (connection_state) {\r\n\t\tcase ConnectionState.NotConnected: \r\n\t\tcase ConnectionState.Connecting:\r\n\t\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\tLoading: {room.name}\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\tcase ConnectionState.Connected:\r\n\t\t\tconst width = 1920;\r\n\t\t\tconst height = 1080;\r\n\t\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<div>{room.name}</div>\r\n\t\t\t\t\t<div style={parentStyle} >\r\n\t\t\t\t\t\t<canvas style={overlayStyle} width={width} height={height} ref={refCallback} />\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdebug ?\r\n\t\t\t\t\t\t\t\t<canvas style={overlayStyle} width={width} height={height} ref={debugRefCallback} /> :\r\n\t\t\t\t\t\t\t\t<></>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<label>\r\n\t\t\t\t\t\t\t<input onChange={toggleDebug} type=\"checkbox\" checked={debug} />\r\n\t\t\t\t\t\t\tDebug: {debug ? 'true' : 'false' }\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t}\r\n});","import React from 'react';\r\nimport { connect, useDispatch } from 'react-redux'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport Game from './game';\r\nimport store, { State, Room, activeRoom } from '../store';\r\nimport { wsSend } from '../stores/websocket';\r\nimport { p2pConnect } from '../stores/peer';\r\n\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\troot: {},\r\n}));\r\n\r\ninterface HomeProps {\r\n\trooms: Array<Room>\r\n\tactive_room?: Room,\r\n}\r\n\r\nconst mapStateToProps = (state: State) => ({\r\n\trooms: state.rooms,\r\n\tactive_room: activeRoom(state),\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n\t// ... normally is an object full of action creators\r\n}\r\n\r\nexport default connect(\r\n\tmapStateToProps,\r\n\tmapDispatchToProps\r\n)(function Home({rooms, active_room}: HomeProps) {\r\n\tconst classes = useStyles();\r\n\tconst history = useHistory();\r\n\r\n\tlet dispatch = useDispatch();\r\n\r\n\tconst createRoomCallback = () => {\r\n\t\tdispatch(wsSend({ CreateRoom: { name: \"Test Room \" + Math.random() }}));\r\n\t\tdispatch(p2pConnect(true));\r\n\t};\r\n\r\n\tconst joinRoomCallback = (room_id: string) => {\r\n\t\tstore.dispatch(wsSend({ JoinRoom: { room_id: room_id }}));\r\n\t\tdispatch(p2pConnect(false));\r\n\t};\r\n\r\n\tif (active_room) {\r\n\t\treturn <Game room={active_room} />;\r\n\t} else {\r\n\t\treturn (\r\n\t\t\t<div className={classes.root} >\r\n\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={createRoomCallback}>\r\n\t\t\t\t\tCreate Room\r\n\t\t\t\t</Button>\r\n\t\t\t\t<List component='nav' >\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\trooms.filter((room) => !room.peer).map((room, index) => {\r\n\t\t\t\t\t\t\treturn <ListItem key={room.id} button onClick={joinRoomCallback.bind(null, room.id)}>\r\n\t\t\t\t\t\t\t\t<ListItemText primary={room.name} />\r\n\t\t\t\t\t\t\t</ListItem>;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t</List>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n});"],"sourceRoot":""}